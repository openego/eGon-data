from fileinput import FileInput
from logging.config import fileConfig
from pathlib import Path
import re

from alembic import context
from alembic.script import ScriptDirectory, write_hooks

from egon.data.db import engine
from egon.data.orm.openstreetmap import metadata

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


@write_hooks.register("fixup")
def fix_minor_issues(filename, options):
    """Fix minor issues like grammar in comments or trailing whitespace."""
    fixes = []
    with FileInput(filename, inplace=True) as script:
        for line in script:
            if re.match(r"# revision identifiers, used by Alembic\.", line):
                print("# Revision identifiers, used by Alembic.")
                fixes.append('"# revision ..." -> "# Revision ..."')
            else:
                print(line, end="")
    for fix in fixes:
        print(f"Fixed: {fix}.")


def script(filename=None, revision=None):
    """Return the script object matching the parameters.

    Either the script object having the given :py:obj:`filename` or having
    the given :py:obj:`revision`, is returned. If both are given, both have
    to match.

    Supplying at least one is mandatory.
    """
    assert filename is not None or revision is not None
    scripts = ScriptDirectory.from_config(config)
    return [
        s
        for s in scripts.walk_revisions()
        if (filename is None or s.path == filename)
        and (revision is None or s.revision == revision)
    ][0]


@write_hooks.register("sequentialize")
def assign_sequential_version_number(filename, options):
    """Prefix the migration script's name with a sequential version number.

    The version number is generated by incrementing the version number of
    the down revision by one. Since the intention is to get a sequential
    ordering when sorting the migration scripts alphabetically, this
    sequential number is right aligned and padded with zeroes to a length of
    three characters.
    """

    current = script(filename=filename)
    path = Path(filename)
    down = (
        "-001."  # Gets incremented to 0 in the line below.
        if current.down_revision is None
        else Path(script(revision=current.down_revision).path).name
    )
    version = int(re.match(r"^(-?\d{3})\..*", down)[1]) + 1
    prefix = f"{version:0>3}."
    path.rename(path.parent / (prefix + path.name))
    print(f'Prefixed new migration script with "{prefix}".')


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
